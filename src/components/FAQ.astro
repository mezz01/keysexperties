---
interface Props {
  data: {
    title: string;
    faqs: {
      question: string;
      answer: string;
    }[];
  };
}

const { data } = Astro.props;
---

<section class="bg-cyan-200/30 mx-4 md:mx-8 lg:mx-24 my-8 lg:my-16 p-6 md:p-12 lg:p-16 rounded-xl">
  <div class="max-w-4xl mx-auto">
    <h2 class="text-3xl md:text-4xl font-bold mb-8 text-center">{data.title}</h2>
    
    <div class="space-y-4">
      {data.faqs.map((faq, index) => (
        <div class="faq-item border border-cyan-300 rounded-lg overflow-hidden">
          <button 
            class="faq-question w-full flex justify-between items-center p-4 bg-white hover:bg-cyan-50 transition-all text-left font-medium"
            data-index={index}
            aria-expanded="false"
          >
            <h3>{faq.question}</h3>
            <svg class="w-5 h-5 transition-transform" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          <div class="faq-answer bg-white px-4 overflow-hidden max-h-0 transition-all duration-300">
            <div class="py-4">
              {faq.answer.includes('*') ? (
                <div>
                  {faq.answer.split('*').map((part, i) => {
                    if (i === 0) return <p>{part}</p>;
                    const [bulletPoint, ...rest] = part.split('\n');
                    return (
                      <div>
                        <div class="flex items-start mt-2">
                          <span class="text-cyan-500 mr-2">â€¢</span>
                          <span>{bulletPoint}</span>
                        </div>
                        {rest.length > 0 && <p class="mt-2">{rest.join('\n')}</p>}
                      </div>
                    );
                  })}
                </div>
              ) : (
                <p>{faq.answer}</p>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const questions = document.querySelectorAll('.faq-question');
    let openIndex = null;

    questions.forEach((question) => {
      question.addEventListener('click', () => {
        const index = parseInt(question.getAttribute('data-index'));
        const answer = question.nextElementSibling;
        const arrow = question.querySelector('svg');
        
        // If clicking the same question that's already open, close it
        if (openIndex === index) {
          answer.style.maxHeight = '0px';
          question.setAttribute('aria-expanded', 'false');
          arrow.classList.remove('rotate-180');
          openIndex = null;
          return;
        }
        if (openIndex !== null) {
          const openQuestion = document.querySelector(`.faq-question[data-index="${openIndex}"]`);
          const openAnswer = openQuestion.nextElementSibling;
          const openArrow = openQuestion.querySelector('svg');
          
          openAnswer.style.maxHeight = '0px';
          openQuestion.setAttribute('aria-expanded', 'false');
          openArrow.classList.remove('rotate-180');
        }
        answer.style.maxHeight = `${answer.scrollHeight}px`;
        question.setAttribute('aria-expanded', 'true');
        arrow.classList.add('rotate-180');
        openIndex = index;
      });
    });
  });
</script>